// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String
  image         String?
  phone         String?
  streetAddress String?
  postalCode    String?
  city          String?
  country       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        OrderProduct[]
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  image       String
  order       Int
  basePrice   Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sizes       Size[]
  extras      Extra[]
  orders      OrderProduct[]
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
}

model Size {
  id        String       @id @default(cuid())
  name      ProductSizes
  price     Float
  product   Product      @relation(fields: [productId], references: [id])
  productId String
}

enum ProductSizes {
  SMALL
  MEDIUM
  LARGE
}

model Extra {
  id        String          @id @default(cuid())
  name      ExtraIngredient
  price     Float
  product   Product         @relation(fields: [productId], references: [id])
  productId String
}

enum ExtraIngredient {
  CHEESE
  TOMATO
  ONION
  PEPPER
  MUSHROOM
  OLIVE
  GARLIC
  BASIL
}

model Category {
  id        String    @id @default(cuid())
  name      String
  order     Int     @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Order {
  id            String   @id @default(cuid())
  paid          Boolean  @default(false)
  subtotal      Float
  deliveryFee   Float
  totalPrice    Float
  userEmail     String
  phone         String
  streetAddress String
  postalCode    String
  city          String
  country       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  products OrderProduct[]
}

model OrderProduct {
  id       String @id @default(cuid())
  quantity Int

  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  User      User?    @relation(fields: [userId], references: [id]) // Optional relation to User as an order can be placed without a user being logged in
  userId    String?
  product   Product @relation(fields: [productId], references: [id])
  productId String
}
